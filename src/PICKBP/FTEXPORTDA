SUBROUTINE FTEXPORTDA(MODE,CONTENTS,ATTRS,REMOTE.FILE,ITEM.COUNT,BYTE.COUNT,STAT)
**************************************************************************
*Copyright (c) 2007-2020 Zumasys,Inc. as an unpublished work. All rights *
*reserved. This work is the property of and embodies trade secrets and   *
*confidential information proprietary to Zumasys, Inc.  It may not be    *
*reproduced, copied, used, disclosed, transferred, adapted or modified   *
*without the express written approval of Zumasys, Inc., except as        *
*provided for in the accompanying warranty notice and licensing          *
*agreement.                                                              *
**************************************************************************
*
* MODULE: FTEXPORTDA
* AUTHOR: PJS
* VERSION: 8.0.1
* CREATED: 07/10/2007
* UPDATES: 02/11/2020
*
* MAINTENANCE RECORD:
*
* 8.0.1
*  PJS 02/11/2020
*   Added support for MVON# platform (MVON).
*
* 7.1.1
*  PJS 03/19/2014
*   Added support for OASYS platform.
*
* 7.0.2
*  PJS 03/11/2011
*   Added missing EQUate for TXT.FLG.PARAM variable.
*
* 7.0.1
*  PJS 01/07/2011
*   Updated for 7.0 release
*
* 5.4.1
*  PJS 07/10/2007
*   Initial release
*
**************************************************************************
**************************************************************************
*
* ACCUTERM DATA TRANSFER - EXPORT DYNAMIC ARRAY TO PC FILE
*
**************************************************************************
**************************************************************************
*
* FTEXPORTDA() SUBROUTINE INTERFACE
*
*
* INPUT:
*
*         MODE         = MODES SEPARATED BY COMMAS (FIRST LETTER IS SUFFICIENT):
*
*                          KERMIT - USES THE KERMIT FILE TRANSFER PROTOCOL (RECOMMENDED).
*
*                          ASCII - USES THE ASCII FILE TRANSFER PROTOCOL.
*
*                          OVERLAY - OVERWRITES EXISTING FILE, WORKSHEET, RANGE,
*                            TABLE, ETC.
*
*                          NO OVERLAY - FAILS TRANSFER IF FILE, WORKSHEET OR TABLE
*                            EXISTS.
*
*                          MERGE - APPENDS DATA TO EXISTING FILE, WORKSHEET OR TABLE.
*                            IF FILE, WORKSHEET OR TABLE DOES NOT EXIST, IT IS CREATED.
*
*                          DELIM=TAB - CREATES TAB DELIMITED TEXT FILE.
*                          DELIM=COMMA - CREATES COMMA DELIMITED TEXT FILE (CSV).
*                          DELIM=CRLF - MERGES MULTIPLE ITEMS INTO SINGLE TEXT FILE.
*                          DELIM=hex - CREATES DELIMITED TEXT FILE WITH USER-DEFINED DELIMITER.
*
*                            NOTE: IF EXPORTING TO ANYTHING EXCEPT A TEXT FILE, YOU MUST
*                            SPECIFY DELIM=TAB!
*
*                          HEADER - FIRST LINE OF TARGET FILE CONTAINS COLUMN HEADERS (FROM ATTRS ARGUMENT)
*
*                          Y - OEM TO ANSI CHARACTER SET TRANSLATION
*
*                          Z - NO CHARACTER SET TRANSLATION
*
*         CONTENTS     = DATA TO STORE IN TARGET FILE (ATTRIBUTES ARE ROWS, VALUES ARE COLUMNS)
*
*         ATTRS        = MULTIVALUED LIST OF COLUMN HEADINGS (IF HEADER OPTION SPECIFIED)
*
*         REMOTE.FILE  = TARGET FILE ON THE PC. SEE FTD DOCUMENTATION FOR SPECIAL
*                        FILE SYNTAX FOR UPDATING RANGES OF EXISTING WORKSHEETS,
*                        OR SPECIFYING ACCESS DATABASE TABLES.
*
*
* OUTPUT:
*         ITEM.COUNT   = NUMBER OF ITEMS EXPORTED
*         BYTE.COUNT   = NUMBER OF BYTES EXPORTED
*         STAT         = NULL INDICATES SUCCESS, OTHERWISE ERROR MESSAGE
*
*                        NOTE: IT IS POSSIBLE TO HAVE PARTIAL SUCCESS, SUCH AS
*                        WHEN THE USER CLICKS THE 'ABORT' BUTTON WHILE A TRANSFER
*                        IS IN PROGRESS. CHECK THE ITEM.COUNT & BYTE.COUNT
*                        VARIABLES TO TEST IF PARTIAL SUCCESS.
*
**************************************************************************
*
EQU MODES TO 'KAONMTCHGDYZ'
EQU MODE.SET TO '25,25,15,15,15,18,18,-5,-7,18,24,24'
EQU MODE.VAL TO '1,0,1,0,2,0,1,1,1,0,1,0'
*
EQU AM TO CHAR(254), VM TO CHAR(253), SVM TO CHAR(252)
EQU TAB TO CHAR(9), CR TO CHAR(13), LF TO CHAR(10)
*
DIM PARAMS(30),VARS(26),CLIENV(10)
*
EQU TXT.FLG.PARAM TO PARAMS(13)
EQU OVR.FLG.PARAM TO PARAMS(15)
EQU OVR.FTD.PARAM TO PARAMS(16)
EQU DCH.FLG.PARAM TO PARAMS(18)
EQU DIR.FLG.PARAM TO PARAMS(21)
EQU FIL.CNV.PARAM TO PARAMS(23)
EQU OEM.CHR.PARAM TO PARAMS(24)
EQU PRO.FLG.PARAM TO PARAMS(25)
*
EQU ICNT TO VARS(1)
EQU BCNT TO VARS(2)
EQU IDMODE TO VARS(3)
EQU ALST TO VARS(4)
EQU HDR TO VARS(5)
EQU EXP TO VARS(6)
EQU GEN TO VARS(7)
EQU PFX TO VARS(8)
EQU SID TO VARS(9)
EQU SKP TO VARS(10)
EQU FILE TO VARS(11)
EQU FNAME TO VARS(12)
EQU ID TO VARS(13)
EQU IDLST TO VARS(14)
EQU CLST TO VARS(15)
EQU IDS TO VARS(16)
EQU ISIZ TO VARS(17)
EQU ISEQ TO VARS(18)
EQU ITEM TO VARS(19)
EQU XSIZ TO VARS(20)
EQU PATH TO VARS(21)
EQU FN TO VARS(22)
EQU FNLST TO VARS(23)
EQU DFILE TO VARS(24)
EQU FNS TO VARS(25)
EQU MD TO VARS(26)
*
EQU CLI.PLATFORM TO CLIENV(1)
EQU CLI.PRODUCT TO CLIENV(2)
EQU CLI.RELEASE TO CLIENV(3)
EQU CLI.CAPAS TO CLIENV(4)
EQU CLI.SVCS TO CLIENV(5)
EQU CLI.SERIAL TO CLIENV(6)
EQU CLI.LICENSE TO CLIENV(7)
EQU CLI.USER TO CLIENV(8)
EQU CLI.VERSION TO CLIENV(9)
EQU CLI.CONFIG TO CLIENV(10)
*
NO.PAGE=@(0,0);* DISABLE PAGINATION (QM, ON)
*
**************************************************************************
*
* ENSURE FTCHK HAS BEEN RUN (OTHERWISE FTSELECT MIGHT PRINT ERROR MESASGE & STOP)
*
STAT='You must RUN FTBP FTCHK and select your host platform before FTEXPORTDA can be used!';RETURN;*#GENERIC#*
*#DEFAULT#*STAT=''
ITEM.COUNT=0
BYTE.COUNT=0
*
**************************************************************************
*
* OPEN MD
*
MAT VARS=''
OPEN 'MD' TO MD ELSE
 OPEN 'VOC' TO MD ELSE
  STAT='Unable to open MD or VOC file!'
  RETURN
 END
END
*
**************************************************************************
*
* VALIDATE CONFIGURATION & INITIALIZE PARAMETERS
*
**************************************************************************
*
CALL FTINITEX('',MAT PARAMS,MAT CLIENV,FV,STAT)
IF STAT NE '' THEN RETURN
IF CLI.PLATFORM=0 THEN
 STAT='FTEXPORTDA requires AccuTerm to run!'
 RETURN
END
IF INDEX(CLI.CAPAS,'Z',1) THEN
 STAT='Upper case / lower case inversion must be disabled to call FTEXPORTDA.'
 RETURN
END
IF INDEX(CLI.CAPAS,'D',1) = 0 THEN
 STAT='This version of AccuTerm does not support file transfers.'
 RETURN
END
OVR.FLG.PARAM = OVR.FTD.PARAM; * USE COMMON OVERWRITE VARIABLE
*
**************************************************************************
*
* PARSE MODE ARGUMENT
*
**************************************************************************
*
P=''
I=0
LOOP
 I=I+1
 ITM=TRIM(FIELD(MODE,',',I))
 Z=OCONV(ITM[1,1],'MCU')
WHILE COL2() DO
 K=INDEX(MODES,Z,1)
 IF K THEN
  J=FIELD(MODE.SET,',',K)
  IF P<ABS(J)> NE '' THEN
   READV TXT FROM FV,'FTPARAMS',ABS(J) ELSE TXT='*'
   STAT='Cannot specify more than one setting for ':FIELD(TXT,',',1):'!'
   RETURN
  END
  IF J>0 THEN
   IF INDEX(ITM,'=',1) THEN
    PARAMS(J)=FIELD(ITM,'=',2)
   END ELSE
    PARAMS(J)=FIELD(MODE.VAL,',',K)+0
   END
  END ELSE
   VARS(-J)=FIELD(MODE.VAL,',',K)+0
  END
  P<ABS(J)>='1'
 END
REPEAT
IF P<25> EQ '' THEN
 STAT='Kermit or ASCII protocol must be specified to FTEXPORTDA subroutine!'
 RETURN
END
IF HDR AND (ATTRS EQ '') THEN
 STAT='No attributes have been specified!'
 RETURN
END
ALST=ATTRS
* SETUP TARGET PATH & FILE NAME
PATH=REMOTE.FILE
K=COUNT(PATH,'\')
IF K THEN K=INDEX(PATH,'\',K); FNLST=PATH[K+1,999]; PATH=PATH[1,K] ELSE
 K=COUNT(PATH,':')
 IF K THEN K=INDEX(PATH,':',K); FNLST=PATH[K+1,999]; PATH=PATH[1,K] ELSE
  FNLST=PATH; PATH=''
 END
END
*
**************************************************************************
*
* SETUP DATA TO SEND
*
**************************************************************************
*
GOSUB 900
ITEM=''
NA=DCOUNT(CONTENTS,AM)
IF HDR THEN K=0 ELSE K=1
FOR I=K TO NA
 IF I>0 THEN
  OLN=CONTENTS<I> ;* DATA ROW
 END ELSE
  OLN=ATTRS ;* HEADING ROW
 END
 NLN=''
 IF CSV THEN
  * ADD QUOTES TO CSV FIELD DATA
  NV=DCOUNT(OLN,VM)
  FOR J=1 TO NV
   VL=OLN<1,J> 
   *[4.0.2] IF INDEX(VL,DELIM,1) OR INDEX(VL,'"',1) THEN
   NQT=COUNT(VL,'"'); WHCH=1
   FOR EACH.QT=1 TO NQT
    N1=INDEX(VL,'"',WHCH)
    VL=VL[1,N1-1]:'"':VL[N1,999999999]
    WHCH=WHCH+2
   NEXT EACH.QT
   vL='"':VL:'"'
   *[4.0.2] END
   NLN=NLN:VL
   IF J<NV THEN NLN=NLN:','
  NEXT J
 END ELSE
  * STRIP EMBEDDED DELIMITERS
  IF DL>0 AND DELIM<>VM THEN
   LOOP N1=INDEX(OLN,DELIM,1) WHILE N1 DO OLN=OLN[1,N1-1]:OLN[N1+DL,999999999] REPEAT
  END
  * CHANGE FIELD DELIMITER
  NV=DCOUNT(OLN,VM)
  FOR J=1 TO NV
   VL=OLN<1,J>
   NLN=NLN:VL
   IF J<NV THEN NLN=NLN:DELIM
  NEXT J
 END
 ITEM<I+1-K>=NLN
NEXT I
*
**************************************************************************
*
* SEND DATA
*
**************************************************************************
*
DIR.FLG.PARAM=1
TXT.FLG.PARAM=1; * ALWAYS TEXT FORMAT
FIL.CNV.PARAM=1; * ALLOW AUTOMATIC FILE FORMAT CONVERSIONS
SUBNAME='FTRDBUFF'
* PERFORM TRANSFER
CALL FTMODE(STAT,SUBNAME,MAT PARAMS,MAT VARS,MAT CLIENV)
ITEM.COUNT=ICNT
BYTE.COUNT=BCNT
RETURN
*
**************************************************************************
*
900 * SORT OUT DELIMITER
*
**************************************************************************
*
DCH = OCONV(DCH.FLG.PARAM,'MCU')
BEGIN CASE
 CASE (DCH EQ "0" AND LEN(DCH) EQ 1) OR DCH EQ "" OR DCH EQ "TAB"
  DELIM=TAB; DL=1; CSV=0
 CASE (DCH EQ "1" AND LEN(DCH) EQ 1) OR DCH EQ "COMMA"
  DELIM=","; DL=1; CSV=1
 CASE (DCH EQ "2" AND LEN(DCH) EQ 1) OR DCH EQ "CRLF"
  * TRANSLATE CRLF TO AM BECAUSE KERMIT AUTOMATICALLY PERFORMS CONVERSION WHEN IN TEXT MODE
  DELIM=AM; DL=1; CSV=0
 CASE 1
  DELIM = ICONV(DCH,'MX');*#GENERIC#*
*#DEFAULT#*  DELIM = ICONV(DCH,'MX')
*#CACHE#*  DELIM = OCONV(DCH,'MCXA')
*#JB#*  DELIM = ICONV(DCH,'MX0C')
*#MD#*  DELIM = ICONV(DCH,'MX')
*#MVON#*  DELIM = ICONV(DCH,'MX0C')
*#NR#*  DELIM = ICONV(DCH,'MX')
*#OAS#*  DELIM = ICONV(DCH,'MX0C')
*#OI#*  DELIM = ICONV(DCH,'MX')
*#ON#*  DELIM = ICONV(DCH,'MX0C')
*#QM#*  DELIM = ICONV(DCH,'MX0C')
*#SEQ#*  DELIM = ICONV(DCH,'MX')
*#UD#*  DELIM = ICONV(DCH,'MX0C')
*#ULT#*  DELIM = ICONV(DCH,'MX')
*#ULTX#*  DELIM = ICONV(DCH,'MX')
*#UV#*  DELIM = ICONV(DCH,'MX0C')
  DL=LEN(DELIM)
  CSV=0
END CASE
RETURN
*
END
