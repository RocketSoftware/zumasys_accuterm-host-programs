SUBROUTINE SUI.DISPLAY.BTNBAR(Left, Top, Width, Height, States, Captions, HotKeys, Opts, RtnCom, MAT TermDef)
**************************************************************************
*Copyright (c) 2004 Zumasys, Inc. as an unpublished work. All rights     *
*reserved. You are free to use this code within your own applications,   *
*but you are expressly forbidden from selling or otherwise distributing  *
*this code without prior written consent. Portions based on original     *
*design by Joe Goldthwaite.                                              *
**************************************************************************
*
* MODULE: SUI.DISPLAY.BTNBAR
* AUTHOR: PJS
* VERSION: 1.0.1
* CREATED: 06/01/2004
* UPDATED: 02/04/2005
*
* MAINTENANCE RECORD:
*
* 1.0.1
*  PJS 02/04/2005
*   Fixed divide by zero error. Note: vertical button bars are not supported.
*
*************************************************************************
*************************************************************************
*
* SMART USER INTERFACE: Display Button Bar
*
*************************************************************************
*************************************************************************
*
*   Input Interface:
*
*    Left, Top: upper-left corner of button bar (relative to current window)
*
*    Width, Height: size of button bar
*
*    States:   multi-valued list of button states (0 or 1 = enabled,
*              2 = disabled). If this list is null, all buttons are
*              enabled.
*
*    Captions: multi-valued list of button captions. Multi-line captions
*              are OK - separate lines with sub-value-marks.
*
*    HotKeys:  multi-valued list of unique single letter HotKeys.
*
*    Opts:     L = left aligned
*              R = right aligned
*              C = centered horizontally
*              T = top aligned
*              B = bottom aligned
*              M = centered vertically
*
*    TermDef:  terminal definitions as set up by SUI.GET.TERM
*
*
*   Output Interface:
*
*    RtnCom:   zero if success, else error code
*
*************************************************************************
*
$INCLUDE SUI.TERMDEF
$INCLUDE SUI.WINDEF
$INCLUDE SUI.CONFIG
*
EQU VM TO CHAR(253), SVM TO CHAR(252)
EQU BEL TO CHAR(7), ESC TO CHAR(27), STX TO CHAR(2), CR TO CHAR(13)
*
BtnCnt = DCOUNT(Captions,VM)
IF BtnCnt < 2 THEN
 RtnCom = SUI.ERROR$ ;* fail!
 RETURN
END
*
IF Width < ((BtnCnt * 2) - 1) OR Height < 1 THEN
 RtnCom = SUI.ERROR.INVSIZE$
 RETURN
END
*
* Adjust screen positions based on current window
BarWd = Width
BarHt = Height
BegCol = Left ;* Screen beginning column
BegRow = Top ;* Screen beginning row
WinInf = TERM.WINDOW<1,2>
IF WinInf EQ '' THEN
 WinWd = TERM.WIDTH
 WinHt = TERM.HEIGHT
END ELSE
 WinWd = WinInf<1,1,SUI.CLIWIDTH$>
 WinHt = WinInf<1,1,SUI.CLIHEIGHT$>
END
IF Left < 0 THEN
 RtnCom = SUI.ERROR.INVPOS$
 RETURN
END
IF Left + BarWd > WinWd THEN
 BarWd = WinWd - Left
 IF BarWd <= 0 OR (BarWd < 1 AND Width > 1) THEN
  RtnCom = SUI.ERROR.INVSIZE$
  RETURN
 END 
END
IF Top < 0 THEN
 RtnCom = SUI.ERROR.INVPOS$
 RETURN
END
IF Top + BarHt > WinHt THEN
 BarHt = WinHt - Top
 IF BarHt <= 0 THEN
  RtnCom = SUI.ERROR.INVSIZE$
  RETURN
 END
END
*
* Format the button bar
*
* get maximum button height
BtnHt = 1
IF BarHt > 1 THEN
 FOR I = 1 TO BtnCnt
  N = DCOUNT(Captions<1,I>,SVM)
  IF N > BtnHt THEN BtnHt = N
 NEXT I
END
* get maximum caption width
BtnWd = 1
FOR I = 1 TO BtnCnt
 IF BarHt > 1 THEN
  N = DCOUNT(Captions<1,I>,SVM)
  FOR J = 1 TO N
   K = LEN(Captions<1,I,J>)
   IF K > BtnWd THEN BtnWd = K
  NEXT J
 END ELSE
  K = LEN(Captions<1,I>)
  IF K > BtnWd THEN BtnWd = K
 END
NEXT I
MaxRows = 1 + INT((BarHt - BtnHt) / (BtnHt + 1)) ;* maximum number of rows of buttons
FOR I = 1 TO MaxRows
 Rows = I ;* assume its a good fit
 Cnt = INT((BtnCnt - 1) / I) + 1
 GOSUB CALC.LAYOUT ;* calculate actual button size & space between buttons
 IF Size >= BtnWd THEN I = MaxRows ;* layout is good, so exit loop
NEXT I
*
* Build button bar layout
*
Layout = ''
*
* vertical alignment
IF INDEX(Opts,'B',1) THEN
 * bottom alignment
 RowOfs = BarHt - (Rows * BtnHt) - (Rows - 1)
END ELSE
 IF INDEX(Opts,'M',1) THEN
  * vertical center
  RowOfs = INT((BarHt - (Rows * BtnHt) - (Rows - 1)) / 2)  
 END ELSE
  * top alignment
  RowOfs = 0
 END
END
Idx = 0
FOR Row = 1 TO Rows
 Y = BegRow + RowOfs + ((Row - 1) * (BtnHt + 1))
 IF BtnCnt - Idx < Cnt THEN Cnt = BtnCnt - Idx
 * horizontal alignment
 IF INDEX(Opts,'R',1) THEN
  * right alignment
  ColOfs = BarWd - (Cnt * Size) - ((Cnt - 1) * Spc)
 END ELSE
  IF INDEX(Opts,'C',1) THEN
   * horizontal center
   ColOfs = INT((BarWd - (Cnt * Size) - ((Cnt - 1) * Spc)) / 2)
  END ELSE
   * left alignment
   ColOfs = 0
  END
 END
 FOR Col = 1 TO Cnt
  Idx = Idx + 1
  X = BegCol + ColOfs + ((Col - 1) * (Size + Spc))
  Layout<Idx> = X:VM:Y
 NEXT Col
NEXT Row
*
* Display button bar
CALL SUI.CLEAR.RECT(BegCol, BegRow, BarWd, BarHt, RtnCom, MAT TermDef)
FOR I = 1 TO BtnCnt
 State = States<1,I>
 IF State = 1 THEN State = 0
 CALL SUI.DISPLAY.BUTTON(Layout<I,1>, Layout<I,2>, Size, BtnHt, State, Captions<1,I>, RtnCom, MAT TermDef)
NEXT I
RtnCom = 0
RETURN
!
CALC.LAYOUT: *
*
* Cnt = number of buttons (input)
* BtnWd = maximum width of button captions (input)
*
* Size = actual size each button (output)
* Spc = space between buttons (output)
*
MinSpc = 1 + (TERM.ATTRTYPE = 1) ;* Minimum space between buttons
MaxSize = INT((BarWd - ((Cnt - 1) * MinSpc)) / Cnt)
IF BtnWd < MaxSize THEN
 MaxWd = INT(BtnWd * 1.5)
 IF MaxWd < MaxSize THEN
  Size = MaxWd
 END ELSE
  Size = MaxSize
 END
END ELSE
 Size = MaxSize
END
IF Cnt > 1 THEN
 Spc = INT((BarWd - (Cnt * Size)) / (Cnt - 1))
 IF Spc > INT(Size / 2) THEN Spc = INT(Size / 2)
END ELSE
 Spc = 0
END
RETURN
END
