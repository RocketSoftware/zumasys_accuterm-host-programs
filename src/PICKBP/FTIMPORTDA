SUBROUTINE FTIMPORTDA(MODE,REMOTE.FILE,CONTENTS,HDR.SKIP,ITEM.COUNT,BYTE.COUNT,STAT)
**************************************************************************
*Copyright (c) 2020 Zumasys,Inc. as an unpublished work. All rights      *
*reserved. This work is the property of and embodies trade secrets and   *
*confidential information proprietary to Zumasys, Inc.  It may not be    *
*reproduced, copied, used, disclosed, transferred, adapted or modified   *
*without the express written approval of Zumasys, Inc., except as        *
*provided for in the accompanying warranty notice and licensing          *
*agreement.                                                              *
**************************************************************************
*
* MODULE: FTIMPORTDA
* AUTHOR: PJS
* VERSION: 8.0.1
* CREATED: 06/09/2016
* UPDATES: 02/11/2020
*
* MAINTENANCE RECORD:
*
* 8.0.1
*  PJS 02/11/2020
*   Added support for MVON# platform (MVON).
*
* 7.1.1
*  PJS 06/09/2016
*   Initial release
*
**************************************************************************
**************************************************************************
*
* ACCUTERM DATA TRANSFER - IMPORT PC FILE TO DYNAMIC ARRAY
*
**************************************************************************
**************************************************************************
*
* FTIMPORTDA() SUBROUTINE INTERFACE
*
*
* INPUT:
*
*         MODE         = MODES SEPARATED BY COMMAS (FIRST LETTER IS SUFFICIENT):
*
*                          KERMIT - USES THE KERMIT FILE TRANSFER PROTOCOL (RECOMMENDED).
*
*                          ASCII - USES THE ASCII FILE TRANSFER PROTOCOL.
*
*                          DELIM=TAB - IMPORTS FROM TAB DELIMITED TEXT FILE.
*                          DELIM=COMMA - IMPORTS FROM COMMA DELIMITED TEXT FILE (CSV).
*                          DELIM=hex - IMPORTS FROM DELIMITED TEXT FILE WITH USER-DEFINED DELIMITER.
*
*                          Y - ANSI TO OEM CHARACTER SET TRANSLATION
*
*                          Z - NO CHARACTER SET TRANSLATION
*
*         REMOTE.FILE  = SOURCE FILE ON THE PC. SEE FTD DOCUMENTATION FOR SPECIAL
*                        FILE SYNTAX FOR IMPORTING RANGES OF EXISTING WORKSHEETS,
*                        OR SPECIFYING ACCESS DATABASE TABLES.
*
*         HDR.SKIP     = NUMBER OF HEADER LINES TO SKIP IN THE SOURCE DATA. THIS
*                        ARGUMENT IS IGNORED IF THE 'HEADER' MODE OPTION IS PRESENT.
*
* OUTPUT:
*         CONTENTS     = CONTENTS OF SOURCE FILE (ATTRIBUTES ARE ROWS, VALUES ARE COLUMNS)
*
*         ITEM.COUNT   = NUMBER OF FILES IMPORTED (0 OR 1)
*
*         BYTE.COUNT   = NUMBER OF BYTES IMPORTED
*
*         STAT         = NULL INDICATES SUCCESS, OTHERWISE ERROR MESSAGE
*
*                        NOTE: IT IS POSSIBLE TO HAVE PARTIAL SUCCESS, SUCH AS
*                        WHEN THE USER CLICKS THE 'ABORT' BUTTON WHILE A TRANSFER
*                        IS IN PROGRESS. CHECK THE ITEM.COUNT & BYTE.COUNT
*                        VARIABLES TO TEST IF PARTIAL SUCCESS.
*
**************************************************************************
*
EQU MODES TO 'KATCDYZ'
EQU MODE.SET TO '25,25,18,18,18,24,24'
EQU MODE.VAL TO '1,0,0,1,0,1,0'
*
EQU AM TO CHAR(254), VM TO CHAR(253), SVM TO CHAR(252)
EQU TAB TO CHAR(9), CR TO CHAR(13), LF TO CHAR(10)
*
DIM PARAMS(30),VARS(26),CLIENV(10)
*
EQU TXT.FLG.PARAM TO PARAMS(13)
EQU OVR.FLG.PARAM TO PARAMS(15)
EQU OVR.FTD.PARAM TO PARAMS(16)
EQU DCH.FLG.PARAM TO PARAMS(18)
EQU DIR.FLG.PARAM TO PARAMS(21)
EQU FIL.CNV.PARAM TO PARAMS(23)
EQU OEM.CHR.PARAM TO PARAMS(24)
EQU PRO.FLG.PARAM TO PARAMS(25)
*
EQU ICNT TO VARS(1)
EQU BCNT TO VARS(2)
EQU IDMODE TO VARS(3)
EQU ALST TO VARS(4)
EQU HDR TO VARS(5)
EQU EXP TO VARS(6)
EQU GEN TO VARS(7)
EQU PFX TO VARS(8)
EQU SID TO VARS(9)
EQU SKP TO VARS(10)
EQU FILE TO VARS(11)
EQU FNAME TO VARS(12)
EQU ID TO VARS(13)
EQU IDLST TO VARS(14)
EQU CLST TO VARS(15)
EQU IDS TO VARS(16)
EQU ISIZ TO VARS(17)
EQU ISEQ TO VARS(18)
EQU ITEM TO VARS(19)
EQU XSIZ TO VARS(20)
EQU PATH TO VARS(21)
EQU FN TO VARS(22)
EQU FNLST TO VARS(23)
EQU DFILE TO VARS(24)
EQU FNS TO VARS(25)
EQU MD TO VARS(26)
*
EQU CLI.PLATFORM TO CLIENV(1)
EQU CLI.PRODUCT TO CLIENV(2)
EQU CLI.RELEASE TO CLIENV(3)
EQU CLI.CAPAS TO CLIENV(4)
EQU CLI.SVCS TO CLIENV(5)
EQU CLI.SERIAL TO CLIENV(6)
EQU CLI.LICENSE TO CLIENV(7)
EQU CLI.USER TO CLIENV(8)
EQU CLI.VERSION TO CLIENV(9)
EQU CLI.CONFIG TO CLIENV(10)
*
NO.PAGE=@(0,0);* DISABLE PAGINATION (QM, ON)
*
**************************************************************************
*
* ENSURE FTCHK HAS BEEN RUN (OTHERWISE FTSELECT MIGHT PRINT ERROR MESASGE & STOP)
*
STAT='You must RUN FTBP FTCHK and select your host platform before FTIMPORTDA can be used!';RETURN;*#GENERIC#*
STAT=''
ITEM.COUNT=0
BYTE.COUNT=0
CONTENTS=''
COL.HEADS=''
*
**************************************************************************
*
* OPEN MD
*
MAT VARS=''
OPEN 'MD' TO MD ELSE
 OPEN 'VOC' TO MD ELSE
  STAT='Unable to open MD or VOC file!'
  RETURN
 END
END
*
**************************************************************************
*
* VALIDATE CONFIGURATION & INITIALIZE PARAMETERS
*
**************************************************************************
*
CALL FTINITEX('',MAT PARAMS,MAT CLIENV,FV,STAT)
IF STAT NE '' THEN RETURN
IF CLI.PLATFORM=0 THEN
 STAT='FTIMPORTDA requires AccuTerm to run!'
 RETURN
END
IF INDEX(CLI.CAPAS,'Z',1) THEN
 STAT='Upper case / lower case inversion must be disabled to call FTIMPORTDA.'
 RETURN
END
IF INDEX(CLI.CAPAS,'U',1) = 0 THEN
 STAT='This version of AccuTerm does not support file transfers.'
 RETURN
END
OVR.FLG.PARAM = OVR.FTD.PARAM; * USE COMMON OVERWRITE VARIABLE
*
**************************************************************************
*
* PARSE MODE ARGUMENT
*
**************************************************************************
*
P=''
I=0
LOOP
 I=I+1
 ITM=TRIM(FIELD(MODE,',',I))
 Z=OCONV(ITM[1,1],'MCU')
WHILE COL2() DO
 K=INDEX(MODES,Z,1)
 IF K THEN
  J=FIELD(MODE.SET,',',K)
  IF P<ABS(J)> NE '' THEN
   READV TXT FROM FV,'FTPARAMS',ABS(J) ELSE TXT='*'
   STAT='Cannot specify more than one setting for ':FIELD(TXT,',',1):'!'
   RETURN
  END
  IF J>0 THEN
   IF INDEX(ITM,'=',1) THEN
    PARAMS(J)=FIELD(ITM,'=',2)
   END ELSE
    PARAMS(J)=FIELD(MODE.VAL,',',K)+0
   END
  END ELSE
   VARS(-J)=FIELD(MODE.VAL,',',K)+0
  END
  P<ABS(J)>='1'
 END
REPEAT
IF P<25> EQ '' THEN
 STAT='Kermit or ASCII protocol must be specified to FTIMPORTDA subroutine!'
 RETURN
END
* SETUP SOURCE PATH & FILE NAME
PATH=REMOTE.FILE
K=COUNT(PATH,'\')
IF K THEN K=INDEX(PATH,'\',K); FNLST=PATH[K+1,999]; PATH=PATH[1,K] ELSE
 K=COUNT(PATH,':')
 IF K THEN K=INDEX(PATH,':',K); FNLST=PATH[K+1,999]; PATH=PATH[1,K] ELSE
  FNLST=PATH; PATH=''
 END
END
*
**************************************************************************
*
* RECEIVE DATA
*
**************************************************************************
*
DIR.FLG.PARAM=0
TXT.FLG.PARAM=1; * ALWAYS TEXT FORMAT
FIL.CNV.PARAM=1; * ALLOW AUTOMATIC FILE FORMAT CONVERSIONS
SUBNAME='FTWTBUFF'
* SETUP HEADER SKIP
SKP=HDR.SKIP+0
* SETUP DELIMITER
GOSUB 900
IF DELIM EQ '' THEN
 IF ERR EQ '' THEN ERR='Invalid text file field delimiter'
 STAT = ERR
 RETURN
END
* PERFORM TRANSFER
CALL FTMODE(STAT,SUBNAME,MAT PARAMS,MAT VARS,MAT CLIENV)
ITEM.COUNT=ICNT
BYTE.COUNT=BCNT
*
**************************************************************************
*
* PROCESS RECEIVED DATA
*
**************************************************************************
*
NATTR=DCOUNT(ITEM,AM)
IF HDR THEN ST=1 ELSE ST=SKP+1
K=1
FOR I=ST TO NATTR
 Ln=ITEM<I>
 EOD=(Ln EQ '')
 J=1
 LOOP UNTIL EOD DO
  GOSUB 1000
  IF VL NE '' THEN CONTENTS<K,J>=VL
  J=J+1
 REPEAT
 K=K+1
NEXT I
*
RETURN
*
**************************************************************************
*
900 * SORT OUT DELIMITER
*
**************************************************************************
*
DCH = OCONV(DCH.FLG.PARAM,'MCU')
BEGIN CASE
 CASE (DCH EQ "0" AND LEN(DCH) EQ 1) OR DCH EQ "" OR DCH EQ "TAB"
  DELIM=TAB; DL=1; CSV=0
 CASE (DCH EQ "1" AND LEN(DCH) EQ 1) OR DCH EQ "COMMA"
  DELIM=","; DL=1; CSV=1
 CASE (DCH EQ "2" AND LEN(DCH) EQ 1) OR DCH EQ "CRLF"
  * CANNOT USE CRLF AS FIELD DELIMITER (AMBIGUOUS)
   ERR='Field delimiter cannot contain CR/LF!'
   DELIM=''; DL=0; CSV=0
 CASE 1
  DELIM = ICONV(DCH,'MX');*#GENERIC#*
*#DEFAULT#*  DELIM = ICONV(DCH,'MX')
*#CACHE#*  DELIM = OCONV(DCH,'MCXA')
*#JB#*  DELIM = ICONV(DCH,'MX0C')
*#MVON#*  DELIM = ICONV(DCH,'MX0C')
*#OAS#*  DELIM = ICONV(DCH,'MX0C')
*#ON#*  DELIM = ICONV(DCH,'MX0C')
*#QM#*  DELIM = ICONV(DCH,'MX0C')
*#UD#*  DELIM = ICONV(DCH,'MX0C')
*#UV#*  DELIM = ICONV(DCH,'MX0C')
  DL=LEN(DELIM)
  CSV=0
END CASE
RETURN
*
*
**************************************************************************
*
1000 * EXTRACT NEXT FIELD
*
**************************************************************************
*
RL=LEN(Ln);* IN CASE OF PARTIAL RECORD, NEED NUMBER OF BYTES REMAINING
VL=''
N2=0
IF CSV AND Ln[1,1]='"' THEN
 * QUOTED FIELD IN CSV TEXT FILE
 N1=2
 NQ=2
 DONE=0
 LOOP
  N2=INDEX(Ln,'"',NQ)
  IF N2=0 THEN N2=RL+1
  IF Ln[N2+1,1]='"' THEN
   * FOUND EMBEDDED QUOTE (2 CONSECUTIVE QUOTES)
   VL=VL:Ln[N1,N2-N1+1]
   N1=N2+2
   NQ=NQ+2
  END ELSE
   * FOUND CLOSING QUOTE
   VL=VL:Ln[N1,N2-N1]
   DONE=1
  END
 UNTIL DONE DO REPEAT
 Ln=Ln[N2+1,999999999] 
END
N1=INDEX(Ln,DELIM,1)
IF N1=0 THEN N1=999999999
VL=VL:Ln[1,N1-1]
N1=N1+DL
IF N1+N2>RL THEN EOD=1 ELSE EOD=0
Ln=Ln[N1,999999999]
RETURN
*
END
